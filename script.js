
// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let map;
let segments = [];
let currentSegment = [];
let routeLines = [];
let liveMarker = null;
let startMarker = null;
let finishMarker = null;
let tracking = false;
let watchId = null;
let startTime = null;
let timerInterval = null;
let smoothingBuffer = [];

let elevationChart = null;
let temperatureChart = null;
let speedChart = null;
let windChart = null;
let distanceOverTimeChart = null;

// === On Load ===
window.onload = () => {
  map = L.map('map').setView([31.7683, 35.2137], 9);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors',
    maxZoom: 19,
  }).addTo(map);

  checkGPSAccess();
  loadSavedRoute();
};

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ GPS ===
function checkGPSAccess() {
  if (!navigator.geolocation) {
    alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    return;
  }
  navigator.geolocation.getCurrentPosition(
    () => console.log("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"),
    err => alert("‚ö† –í–∫–ª—é—á–∏—Ç–µ GPS: " + err.message),
    { enableHighAccuracy: true }
  );
}

// === –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ===
function smoothCoords(lat, lon) {
  smoothingBuffer.push({ lat, lon });
  if (smoothingBuffer.length > 3) smoothingBuffer.shift();
  const avgLat = smoothingBuffer.reduce((sum, p) => sum + p.lat, 0) / smoothingBuffer.length;
  const avgLon = smoothingBuffer.reduce((sum, p) => sum + p.lon, 0) / smoothingBuffer.length;
  return { lat: avgLat, lon: avgLon };
}

// === –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø ===
function toggleTracking() {
  tracking = !tracking;
  document.getElementById("startBtn").textContent = tracking ? "‚è∏ –°—Ç–æ–ø" : "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç";
  if (tracking) {
    startTime = new Date();
    startTimer();
    startTracking();
  } else {
    stopTracking();
    stopTimer();
    markFinish();
  }
}

// === –¢—Ä–µ–∫–∏–Ω–≥ ===
function startTracking() {
  currentSegment = [];
  segments.push(currentSegment);
  const status = createStatusElement("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ GPS...");

  watchId = navigator.geolocation.watchPosition(async pos => {
    const { latitude, longitude, accuracy, speed } = pos.coords;
    if (accuracy > 15) {
      status.textContent = `‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å ${accuracy.toFixed(1)} –º ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ...`;
      return;
    }
    status.remove();

    const coords = smoothCoords(latitude, longitude);
    const elevation = await fetchElevation(coords.lat, coords.lon);
    const weather = await fetchWeather(coords.lat, coords.lon);

    const now = new Date();
    const elapsed = startTime ? now - startTime : 0;

    const point = {
      lat: coords.lat,
      lon: coords.lon,
      alt: elevation,
      time: now.toISOString(),
      seconds: Math.floor(elapsed / 1000),
      speed: speed != null ? Math.round(speed * 60) : null,
      motion: speed == null ? "unknown" : (speed < 2 ? "walk" : "vehicle"),
      weather: weather
    };

    if (currentSegment.length === 0) {
      map.setView([coords.lat, coords.lon], 16);
      markStart(coords);
    }

    if (shouldAddPoint(coords)) {
      currentSegment.push(point);
      updateMap();
      drawAllCharts();
    }

    updateLiveMarker(coords, point);
    map.panTo([coords.lat, coords.lon]);
    updateMotionDisplay(point.motion);
    document.getElementById("currentAlt").textContent = point.alt !== null ? `–í—ã—Å–æ—Ç–∞: ${Math.round(point.alt)} –º` : "–í—ã—Å–æ—Ç–∞: ‚Äî";
  }, err => {
    status.remove();
    alert("–û—à–∏–±–∫–∞ GPS: " + err.message);
  }, {
    enableHighAccuracy: true,
    maximumAge: 0,
    timeout: 5000
  });
}

function stopTracking() {
  if (watchId !== null) {
    navigator.geolocation.clearWatch(watchId);
    watchId = null;
  }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ===
function updateLiveMarker(coords, point) {
  const latlng = [coords.lat, coords.lon];
  const w = point.weather;
  const popupText = `
    üìç –í—ã –∑–¥–µ—Å—å<br>
    –í—ã—Å–æ—Ç–∞: ${point.alt !== null ? Math.round(point.alt) + ' –º' : '‚Äî'}<br>
    –°–∫–æ—Ä–æ—Å—Ç—å: ${point.speed ?? '‚Äî'} –º/–º–∏–Ω<br>
    –¢–µ–º–ø: ${point.motion === "walk" ? "üö∂" : "üöó"}<br>
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${w?.temp ?? "‚Äî"}¬∞C<br>
    –í–µ—Ç–µ—Ä: ${w?.wind ?? "‚Äî"} –∫–º/—á ${w?.dir ?? ""}
  `;
  if (!liveMarker) {
    liveMarker = L.circleMarker(latlng, {
      radius: 8,
      color: "red",
      fillColor: "#f03",
      fillOpacity: 0.8
    }).addTo(map).bindPopup(popupText).openPopup();
  } else {
    liveMarker.setLatLng(latlng).setPopupContent(popupText);
  }
}

function updateMotionDisplay(motion) {
  const icon = motion === "walk" ? "üö∂" : motion === "vehicle" ? "üöó" : "‚ùì";
  document.getElementById("motionType").textContent = `–†–µ–∂–∏–º: ${icon}`;
}

function startTimer() {
  updateTimer();
  timerInterval = setInterval(updateTimer, 1000);
}

function stopTimer() {
  clearInterval(timerInterval);
}

function updateTimer() {
  const now = new Date();
  const elapsed = startTime ? new Date(now - startTime) : new Date(0);
  const h = String(elapsed.getUTCHours()).padStart(2, '0');
  const m = String(elapsed.getUTCMinutes()).padStart(2, '0');
  const s = String(elapsed.getUTCSeconds()).padStart(2, '0');
  document.getElementById("timer").textContent = `–í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è: ${h}:${m}:${s}`;
}

function shouldAddPoint(coords) {
  if (currentSegment.length === 0) return true;
  const last = currentSegment[currentSegment.length - 1];
  return haversine(last, coords) >= 0.003;
}

function updateMap() {
  routeLines.forEach(line => map.removeLayer(line));
  routeLines = [];

  segments.forEach((segment, i) => {
    const latlngs = segment.map(p => [p.lat, p.lon]);
    const color = `hsl(${i * 60 % 360}, 80%, 50%)`;
    const poly = L.polyline(latlngs, { color }).addTo(map);
    routeLines.push(poly);
  });

  const totalPoints = segments.reduce((sum, s) => sum + s.length, 0);
  document.getElementById("pointsCount").textContent = `–¢–æ—á–µ–∫: ${totalPoints}`;
  document.getElementById("distance").textContent = `–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${totalDistance().toFixed(2)} –∫–º`;
}

// === –†–∞—Å—á—ë—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ ===
const toRad = deg => deg * Math.PI / 180;

function haversine(p1, p2) {
  const R = 6371;
  const dLat = toRad(p2.lat - p1.lat);
  const dLon = toRad(p2.lon - p1.lon);
  const a = Math.sin(dLat / 2) ** 2 +
            Math.cos(toRad(p1.lat)) * Math.cos(toRad(p2.lat)) *
            Math.sin(dLon / 2) ** 2;
  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}

function totalDistance() {
  let dist = 0;
  segments.forEach(seg => {
    for (let i = 0; i < seg.length - 1; i++) {
      dist += haversine(seg[i], seg[i + 1]);
    }
  });
  return dist;
}

function drawAllCharts() {
  const all = segments.flat();
  const labels = all.map(p => formatTime(p.seconds));
  const altitudes = all.map(p => p.alt ?? null);
  const temps = all.map(p => p.weather?.temp ?? null);
  const speeds = all.map(p => p.speed ?? null);
  const winds = all.map(p => p.weather?.wind ?? null);

  let dist = 0;
  const distanceOverTime = all.map((p, i) => {
    if (i > 0) dist += haversine(all[i - 1], all[i]);
    return dist.toFixed(2);
  });

  const drawChart = (id, label, data, color) => {
    const ctx = document.getElementById(id);
    return new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label,
          data,
          borderColor: color,
          pointRadius: 1,
          fill: false,
          tension: 0.3
        }]
      },
      options: {
        responsive: true,
        plugins: { legend: { display: false }},
        scales: {
          x: { title: { display: true, text: "–í—Ä–µ–º—è" } },
          y: { title: { display: true, text: label } }
        }
      }
    });
  };

  if (elevationChart) elevationChart.destroy();
  if (temperatureChart) temperatureChart.destroy();
  if (speedChart) speedChart.destroy();
  if (windChart) windChart.destroy();
  if (distanceOverTimeChart) distanceOverTimeChart.destroy();

  elevationChart = drawChart("elevationChart", "–í—ã—Å–æ—Ç–∞ (–º)", altitudes, "green");
  temperatureChart = drawChart("temperatureChart", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", temps, "orange");
  speedChart = drawChart("speedChart", "–°–∫–æ—Ä–æ—Å—Ç—å (–º/–º–∏–Ω)", speeds, "blue");
  windChart = drawChart("windChart", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–∫–º/—á)", winds, "purple");
  distanceOverTimeChart = drawChart("distanceOverTimeChart", "–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)", distanceOverTime, "brown");
}

function formatTime(seconds) {
  const h = String(Math.floor(seconds / 3600)).padStart(2, '0');
  const m = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
  const s = String(seconds % 60).padStart(2, '0');
  return `${h}:${m}:${s}`;
}

// === API –∑–∞–ø—Ä–æ—Å—ã ===
async function fetchWeather(lat, lon) {
  try {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,wind_speed_10m,wind_direction_10m&current_weather=true`;
    const res = await fetch(url);
    const data = await res.json();
    const w = data.current;
    return {
      temp: Math.round(w.temperature_2m),
      wind: Math.round(w.wind_speed_10m),
      dir: degToDir(w.wind_direction_10m)
    };
  } catch {
    return null;
  }
}

async function fetchElevation(lat, lon) {
  try {
    const url = `https://api.open-meteo.com/v1/elevation?latitude=${lat}&longitude=${lon}`;
    const res = await fetch(url);
    const data = await res.json();
    return Math.round(data.elevation ?? 0);
  } catch {
    return null;
  }
}

function degToDir(deg) {
  const dirs = ["–°", "–°-–í", "–í", "–Æ-–í", "–Æ", "–Æ-–ó", "–ó", "–°-–ó"];
  return dirs[Math.round(deg / 45) % 8];
}

// === –•—Ä–∞–Ω–∏–ª–∏—â–µ ===
function saveRoute() {
  const data = {
    name: `–ú–∞—Ä—à—Ä—É—Ç –æ—Ç ${new Date().toLocaleString()}`,
    segments,
    totalTime: startTime ? new Date() - startTime : null
  };
  localStorage.setItem("lastRoute", JSON.stringify(data));
  alert("–ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
}

function loadSavedRoute() {
  const data = localStorage.getItem("lastRoute");
  if (!data) return;
  try {
    const parsed = JSON.parse(data);
    segments = parsed.segments || [];
    startTime = parsed.totalTime ? new Date(Date.now() - parsed.totalTime) : null;
    updateMap();
    markStart(segments[0][0]);
    markFinish();
    drawAllCharts();
  } catch {
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.");
  }
}

function exportRoute() {
  const data = {
    name: `–ú–∞—Ä—à—Ä—É—Ç –æ—Ç ${new Date().toLocaleString()}`,
    segments,
    totalTime: startTime ? new Date() - startTime : null
  };
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = "route.json";
  a.click();
}

function importRoute() {
  const file = document.getElementById("importFile").files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = e => {
    try {
      const data = JSON.parse(e.target.result);
      segments = data.segments || [];
      startTime = data.totalTime ? new Date(Date.now() - data.totalTime) : null;
      updateMap();
      markStart(segments[0][0]);
      markFinish();
      drawAllCharts();
    } catch {
      alert("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON.");
    }
  };
  reader.readAsText(file);
}

function markStart(coords) {
  if (startMarker) map.removeLayer(startMarker);
  startMarker = L.marker([coords.lat, coords.lon], {
    icon: L.divIcon({ className: 'start-icon', html: "üü¢", iconSize: [20, 20] })
  }).addTo(map).bindPopup("üö© –°—Ç–∞—Ä—Ç");
}

function markFinish() {
  const last = segments.flat().at(-1);
  if (!last) return;
  if (finishMarker) map.removeLayer(finishMarker);
  finishMarker = L.marker([last.lat, last.lon], {
    icon: L.divIcon({ className: 'finish-icon', html: "üî¥", iconSize: [20, 20] })
  }).addTo(map).bindPopup("üèÅ –§–∏–Ω–∏—à");
}

// === –û—á–∏—Å—Ç–∫–∞ ===
function clearRoute() {
  stopTracking();
  stopTimer();
  segments = [];
  routeLines.forEach(line => map.removeLayer(line));
  if (liveMarker) map.removeLayer(liveMarker);
  if (startMarker) map.removeLayer(startMarker);
  if (finishMarker) map.removeLayer(finishMarker);
  routeLines = [];
  liveMarker = null;
  startMarker = null;
  finishMarker = null;

  document.getElementById("distance").textContent = "–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ‚Äî";
  document.getElementById("pointsCount").textContent = "–¢–æ—á–µ–∫: 0";
  document.getElementById("timer").textContent = "–í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è: 00:00:00";

  if (elevationChart) elevationChart.destroy();
  if (temperatureChart) temperatureChart.destroy();
  if (speedChart) speedChart.destroy();
  if (windChart) windChart.destroy();
  if (distanceOverTimeChart) distanceOverTimeChart.destroy();
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ===
function createStatusElement(text) {
  const div = document.createElement("div");
  div.id = "gps-status";
  div.textContent = text;
  document.body.appendChild(div);
  return div;
}
